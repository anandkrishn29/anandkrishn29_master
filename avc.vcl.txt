vcl 4.0;
import directors;

# This is a basic VCL configuration file for varnish.  See the vcl(7)
# man page for details on VCL syntax and semantics.
#
include "/product/varnish/etc/varnish/TEST_ELB/new_PROD_LB_BE_backends.vcl";
include "/product/varnish/etc/varnish/TEST_ELB/new_PROD_LB_BE_ANON_backends.vcl";
include "/product/varnish/etc/varnish/TEST_ELB/new_PROD_LB_BE_GETCDN_backends.vcl";
include "/product/varnish/etc/varnish/TEST_ELB/new_PROD_FE_backends.vcl";
include "/product/varnish/etc/varnish/TEST_ELB/directors.vcl";

#IMPORT OF EXTERNAL VMOD
#import basicauth;
import std;



sub vcl_hash {
        hash_data(req.url);
        if (req.http.host) {
           hash_data(req.http.host);
        } else {
           hash_data(server.ip);
        }
        return (lookup);
}

acl purge {
                "localhost";
                "127.0.0.1";
                "10.254.10.11"; #BATCH01
                "10.254.11.12"; #BATCH02
                "10.254.0.6"; #Nat1
}

#acl forbidden {
        #"10.254.0.0"/24;
        #"2.229.23.249"/32;
#}

sub vcl_recv {
 # Block access from these hosts
        #if (client.ip ~ forbidden) {
                #return (synth(200, "questo ip nun me piace "+client.ip));
        #}

        #if(req.http.x-forwarded-for  ~ "2.229.23.249") {
                #return (synth(403, "questo ip nun me piace "+client.ip));
        #}

        if (req.method == "PURGE") {
                if (req.url == "/" || req.url == ""){
                                return (synth(405, "URL not allowed for PURGE."));
                } elseif (!client.ip ~ purge) {
                                return (synth(405, "Purge not allowed from "+client.ip));
                } else {
                                ban("req.url ~ "+req.url);
                                return (synth(200, req.url+" successfully purged by "+client.ip));
                }
        }

if (req.url ~ "action=KeepAlive")
{
        return (synth(801, ""));
}
if (req.url ~ "action=StopContent")
{
        return (synth(802, ""));
}

# JIO Live channel
if ((req.url ~ "action=CheckAggregatedContentRights" && req.url ~ "channel=JIO" && ((req.url ~ "contentId=10183")||(req.url ~ "contentId=10186")||(req.url ~ "contentId=10187")||(req.url ~ "contentId=10189")||(req.url ~ "contentId=10389")||(req.url ~ "contentId=10390")||(req.url ~ "contentId=5195")||(req.url ~ "contentId=7307")||(req.url ~ "contentId=7308")||(req.url ~ "contentId=7309")||(req.url ~ "contentId=7310")||(req.url ~ "contentId=816")||(req.url ~ "contentId=817")||(req.url ~ "contentId=818")||(req.url ~ "contentId=819")||(req.url ~ "contentId=820")||(req.url ~ "contentId=821")||(req.url ~ "contentId=823")||(req.url ~ "contentId=824")||(req.url ~ "contentId=895")||(req.url ~ "contentId=9712")||(req.url ~ "contentId=9713")||(req.url ~ "contentId=9714")||(req.url ~ "contentId=9715")||(req.url ~ "contentId=9752")||(req.url ~ "contentId=2001702202")||(req.url ~ "contentId=2001702649")||(req.url ~ "contentId=2001702650")||(req.url ~ "contentId=2001702651")))){
                return (synth(803, ""));
}
if ((req.url ~ "action=CheckAggregatedContentRights" && req.http.Cookie !~ "avs_cookie" && ((req.url ~ "contentId=2001700369")|| (req.url ~ "contentId=2001700504")|| (req.url ~ "contentId=2001700505")|| (req.url ~ "contentId=2001700370")||(req.url ~ "contentId=2001702202")||(req.url ~ "contentId=2001702649")||(req.url ~ "contentId=2001702650")||(req.url ~ "contentId=2001702651")) && ((req.url ~ "channel=PCTV")||(req.url ~ "channel=ANDROID")||(req.url ~ "channel=IOS")||(req.url ~ "channel=TABLET")||(req.url ~ "channel=JIO")))){
        return (synth(803, ""));
}

if (req.url ~ "action=InitiatePurchase" && req.url ~ "channel=JIO")
{ return (synth(804, "")); }

if (req.url ~ "action=NotifyPurchase" && req.url ~ "channel=JIO")
{ return (synth(805, "")); }
#if ((req.url ~ "action=SetPlayListContent" ) &&
#        (req.url ~ "contentId=1000058977" ||
#         req.url ~ "contentId=1000044087" ||
#         req.url ~ "contentId=1000057423" ||
#         req.url ~ "contentId=1000057426" ||
#         req.url ~ "contentId=1000056856" ||
#         req.url ~ "contentId=1000056097" ||
#         req.url ~ "contentId=1000055856" ||
#         req.url ~ "contentId=1000059889" ||
#         req.url ~ "contentId=1000057380" ||
#         req.url ~ "contentId=1000058988")
#   ){
#        return (synth(752, ""));
#}

if (req.url ~ "ELBhealth.html"){ return (synth(601, "")); }

#if (req.url ~ "/AVS/") {
#       if (!basicauth.match("/product/varnish/auth/.htpasswd", req.http.Authorization)) {
#               return (synth(401, "Authentication required"));
#       }
#}

# Definition of Virtual Host
##################### ANON - REG|| req.http.host ~ "(?i)domain" ||  req.http.host ~ "(?i)r3" ||
        if (req.http.host ~ "(?i)^account-subs.domain.com"  ||
            req.http.host ~ "(?i)^account.domain.com"  ||
            req.http.host ~ "(?i)^account-internal.domain.com"  ||
            req.http.host ~ "(?i)^account-staging.domain.com" ||
            req.http.host ~ "(?i)^origin-account.domain.com" ||
            (req.http.host ~ "(?i)^domain-r3-1734821878.ap-southeast-1.elb.amazonaws.com" && req.url !~ "action=GetCDN" && req.url !~ "action=GetRefreshedCDN") ||
            req.http.host ~ "(?i)^primary-account.domain.com" ||
            req.http.host ~ "(?i)^secondary-account.domain.com"){

                if (req.url ~ "akamai_testobject/(.*)" ||
                    req.url ~ "health.html") {
                          set req.backend_hint = farm_pctv.backend();
                }
                elseif (req.url !~ "/AVS/besc" ||
                                                req.url ~ "action=GetAvsReleaseNumber" ||
                                                req.url ~ "action=GetContentList" ||
                                                req.url ~ "action=GetLastViewedEpisode" ||
                                                req.url ~ "action=GetMostPopularContent" ||
                                                req.url ~ "action=GetSimilarContent" ||
                                                req.url ~ "action=DeletePlayListContent"  ||
                                                req.url ~ "action=GetPlayList" ||
                                                req.url ~ "action=GetProfile" ||
                                                req.url ~ "action=LoginFB" ||
                                                req.url ~ "action=SetPlayListContent" ||
                                                req.url ~ "action=SetUserInfo" ||
                                                req.url ~ "action=UpdateProfile" ||
                                                req.url ~ "action=ValidateOTP" ||
                                                req.url ~ "action=GenerateOTP" ||
                                                req.url ~ "action=Dislike"       ||
                                                req.url ~ "action=GetFilteredShowCollections" ||
                                                req.url ~ "action=GetMarkedContent" ||
                                                req.url ~ "action=SetDeviceToken" ||
                                                req.url ~ "action=SetMarkedContent" ||
                                                req.url ~ "action=GetRecommendedContents" ||
                                                req.url ~ "action=GetRating" ||
                                                req.url ~ "action=Like" ||
                                                req.url ~ "action=UpdateParameters") {
                                return (synth(400, "Bad Request."));
                }
                                                                elseif (req.url ~ "action=GetAggregatedContentDetails" ||
                                                                  req.url ~ "action=GetArrayContentList" ||
                                                                  req.url ~ "action=GetCatalogueTree" ||
                                                                  req.url ~ "action=GetSubHierarchyCount" ||
                                                                  req.url ~ "action=GetContentMetadataCustom" ||
                                                                  req.url ~ "action=GetMovieCollections" ||
                                                                  req.url ~ "action=GetProgramContent" ||
                                                                  req.url ~ "action=GetAllSeriesEpisodesCount"){
                                                                                set req.url = regsub(req.url, "&appVersion=([%.\-_A-z0-9]+)", "");
                                                                                set req.backend_hint = farm_anon.backend();
                                                                }
                elseif (req.url ~ "action=ChangePasswordSTAR" ||
                        #req.url ~ "action=CheckAggregatedContentRights" ||
                        req.url ~ "action=GetConfiguration" ||
                        req.url ~ "action=GetUserInfo" ||
                        req.url ~ "action=JoinMobile" ||
                        req.url ~ "action=KeepAlive" ||
                        req.url ~ "action=Login" ||
                        req.url ~ "action=Logout" ||
                        req.url ~ "action=NotifyDownload" ||
                        req.url ~ "action=StopContent" ||
                        req.url ~ "action=UpdateParameters" ||
                        req.url ~ "action=FreeTrialCheck" ||
                        req.url ~ "action=GetPurchaseHistory" ||
                        req.url ~ "action=ProductPurchaseBD" ||
                        req.url ~ "action=BDListener" ||
                        req.url ~ "action=GetPurchaseHistoryCustom" ||
                        req.url ~ "action=BDQueryAPIListener" ||
                        req.url ~ "action=PaytmQueryAPIListener" ||
                        req.url ~ "action=GetProductList" ||
                        req.url ~ "action=CancelSubscription" ||
                        req.url ~ "action=InitiatePurchase" ||
                        req.url ~ "action=NotifyPurchase" ||
                        req.url ~ "action=GetVoucher" ||
                        req.url ~ "action=UseVoucher" ||
                        req.url ~ "action=ReserveVoucher" ||
                        req.url ~ "action=RegisterDevice" ||
                        req.url ~ "action=GetAccountDeviceList" ||
                        req.url ~ "action=RemoveDeviceAssociation" ||
                        req.url ~ "action=GetSubscriptionUtil" ||
                                                                                                req.http.Cookie ~ "avs_cookie" ||
                        req.url ~ "index.html") {
                                set req.backend_hint = farm_reg.backend();
                }
                elseif (req.url ~ "action=CheckAggregatedContentRights" && req.http.Cookie ~ "avs_cookie")
                {
                        set req.backend_hint = farm_reg.backend();
                }
                elseif (req.url ~ "action=CheckAggregatedContentRights" && req.http.Cookie !~ "avs_cookie")
                {
                        set req.backend_hint = farm_anon.backend();
                }
                else {
                                return (synth(501, "Not Implemented."));
                }
                #if (req.url ~ "action=GetConfiguration" && req.url ~ "channel=IOS" && req.url !~ "appVersion=5.5")
                if ((req.url ~ "action=GetConfiguration" && req.url ~ "channel=IOS") && ((req.url ~ "appVersion=5.5.0") || (req.url !~ "appVersion=5.5" && req.url !~ "appVersion=5.6" && req.url !~ "appVersion=5.7" && req.url !~ "appVersion=5.8" && req.url !~ "appVersion=5.9" && req.url !~ "appVersion=5.10" && req.url !~ "appVersion=5.11" && req.url !~ "appVersion=5.12" && req.url !~ "appVersion=5.13" && req.url !~ "appVersion=5.14" && req.url !~ "appVersion=5.15" && req.url !~ "appVersion=5.16" && req.url !~ "appVersion=6")))
                {
                        return (synth(901, ""));
                }
        }
##################### GETCDN
        elseif (req.http.host ~ "(?i)^getcdn.domain.com" ||
                req.http.host ~ "(?i)^getcdn-staging.domain.com" ||
                req.http.host ~ "(?i)^origin-getcdn.domain.com" ||
                (req.http.host ~ "(?i)^domain-r3-1734821878.ap-southeast-1.elb.amazonaws.com" && (req.url ~ "action=GetCDN" || req.url ~ "action=GetRefreshedCDN")) ||
                req.http.host ~ "(?i)^primary-getcdn.domain.com" ||
                req.http.host ~ "(?i)^secondary-getcdn.domain.com"){

                        if (req.url ~ "akamai_testobject/(.*)" ||
                          req.url ~ "health.html") {
                        set req.backend_hint = farm_pctv.backend();
                        }
                        elseif (req.url !~ "/AVS/besc" ||
                                                        req.url ~ "action=GetAvsReleaseNumber" ||
                                                        req.url ~ "action=UpdateParameters") {
                                                                return (synth(400, "Bad Request."));
                        }
                        elseif (req.url ~ "action=GetCDN" || req.url ~ "action=GetRefreshedCDN") {
                        set req.backend_hint = farm_getcdn.backend();
                        } else {
                                        return (synth(501, "Not Implemented."));
                        }
        }
##################### PCTV
        elseif (req.http.host ~ "(?i)^www.domain.com" ||
                req.http.host ~ "(?i)^www-staging.domain.com" ||
                req.http.host ~ "(?i)^origin.domain.com" ||
                req.http.host ~ "(?i)^origin-mvp.domain.com" ||
                req.http.host ~ "(?i)^m.domain.com" ||
                req.http.host ~ "(?i)^m-staging.domain.com" ||
                req.http.host ~ "(?i)^origin-m.domain.com" ||
                req.http.host ~ "(?i)^primary.domain.com" ||
                req.http.host ~ "(?i)^secondary.domain.com"){
                        if (req.url !~ "/AVS/") {
                        set req.backend_hint = farm_pctv.backend();
                        }
        }
        elseif (req.url ~ "ELB_Jboss.html"){
                set req.backend_hint = farm_reg.backend();
        }
        else {
                        return (synth(400, "Bad Request."));
        }

#Add of custom http headers
        if (req.http.true-client-ip){
                set req.http.ClientIP = req.http.true-client-ip;
        } else {
                set req.http.ClientIP = client.ip;
        }

        set req.http.AVSSite = "http://star-aggregator.avs-accenture.com";

        if (req.url ~ "/css/(.*)") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "/fonts/(.*)") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "/img/(.*)") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "/js/(.*)") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "/components/(.*)") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "/controllers/(.*)") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "/partials/(.*)") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "/bower_components/(.*)") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "/akamai_testobject/(.*)") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "\.(css|ico|jpe?g|js|png|ttf|swf)$"){
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "\.(htm?)$" && req.url !~ "\.(index.htm?)$"){
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=CheckAggregatedContentRights" && req.http.cookie !~ "avs_cookie") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=Login") {
                        unset req.http.Cookie;
                        #unset req.http.Cache-Control;
                        return (pass);
        }
        elseif (req.url ~ "action=GetAggregatedContentDetails") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetArrayContentList") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetProgramContent") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetCatalogueTree") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetCDN" || req.url ~ "action=GetRefreshedCDN") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=KeepAlive") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetConfiguration") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetContentList") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetMostPopularContent") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetSimilarContent") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=SearchContents") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetSubHierarchyCount") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetAllSeriesEpisodesCount") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetMovieCollections") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "CheckConnectionWC.test") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        elseif (req.url ~ "action=GetContentMetadataCustom") {
                        unset req.http.Cookie;
                        unset req.http.Cache-Control;
                        return (hash);
        }
        else {
                        return(pass);
        }
}

sub vcl_backend_error {
    if (beresp.status == 750) {
        set beresp.http.Location = "http://www.startv.in/";
        set beresp.status = 302;
        #return(deliver);
    }elseif (beresp.status == 752) {
      set beresp.http.Content-Type = "text; charset=utf-8";
      synthetic({"{"errorDescription":"","message":"PANIC","resultCode":"KO","resultObj":null,"systemTime":1432736997}"});
      set beresp.status = 200;
  }
return (deliver);
}

sub vcl_synth {
    if (resp.status == 750) {
        set resp.http.Location = "http://www.startv.in/";
        set resp.status = 302;
        #return(deliver);
    }elseif (resp.status == 752) {
      set resp.http.Content-Type = "text; charset=utf-8";
      synthetic({"{"errorDescription":"","message":"PANIC","resultCode":"KO","resultObj":null,"systemTime":1432736997}"});
      set resp.status = 200;
}elseif (resp.status == 901) {
        set resp.http.Content-Type = "text/plain; charset=utf-8";
        synthetic(std.fileread("/product/varnish/etc/varnish/GetConfiguration_IOS.json"));
        set resp.status = 200;
}elseif (resp.status == 801) {
      set resp.http.Content-Type = "text/plain; charset=utf-8";
      synthetic({"{"errorDescription":"","message":"","resultCode":"OK","resultObj":{"keepAlive":600},"systemTime":1456935753}"});
      #synthetic({"{"errorDescription":"","message":"","resultCode":"OK","resultObj":{"keepAlive":600,"token":""},"systemTime":1456985459}"});
      set resp.status = 200;
   }elseif (resp.status == 802) {
      set resp.http.Content-Type = "text; charset=utf-8";
      synthetic({"{"errorDescription":"","message":"","resultCode":"OK","resultObj":{"threshold":0},"systemTime":1456935754}"});
      set resp.status = 200;
   }elseif (resp.status == 803) {
      set resp.http.Content-Type = "text; charset=utf-8";
      synthetic({"{"errorDescription":"","message":"PANIC","resultCode":"OK","resultObj":{"bookmark":0,"variantsList":[{"canWatch":"Y","cp_id":"940667","dwnMaxDays":0,"dwnNumber":0,"dwnNumberHours":0,"maxPlayMinutesRemained":0,"solutionOfferList":[]}]},"systemTime":1477056378}"});
      set resp.status = 200;
   }elseif (resp.status == 804) {
        set resp.http.Content-Type = "text/plain; charset=utf-8";
        synthetic({"{"errorDescription": "IP-panic","message": "stub response","resultCode": "KO","resultObj": "","systemTime": 1483340822}"});
        set resp.status = 200;
   }elseif (resp.status == 805) {
        set resp.http.Content-Type = "text/plain; charset=utf-8";
        synthetic({"{"errorDescription": "NP-panic","message": "stub response","resultCode": "KO","resultObj": "","systemTime": 1483340822}"});
        set resp.status = 200;
    }elseif (resp.status == 601) {
      set resp.http.Content-Type = "text; charset=utf-8";
      synthetic("OK");
      set resp.status = 200;
  }
return (deliver);
}

#sub vcl_pipe {
#       set bereq.http.Connection = "Close";
#       return(pipe);
#}

sub vcl_pass {
       return (fetch);
}

sub vcl_hit {
        return(deliver);
}

sub vcl_miss {
     return(fetch);
}

sub vcl_backend_response {
set beresp.http.X-Backend = beresp.backend.name;
                                if (bereq.url ~ "/css/(.*)" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "/fonts/(.*)" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "/img/(.*)" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "/js/(.*)" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "/components/(.*)" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "/controllers/(.*)" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "/partials/(.*)" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "/bower_components/(.*)" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "/akamai_testobject/(.*)" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "\.(css|ico|jpe?g|js|png|ttf|swf)$" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "\.(htm?)$" && bereq.url !~ "\.(index.htm?)$" && beresp.status <= 300){
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "action=CheckAggregatedContentRights" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetAggregatedContentDetails" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 7200s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetArrayContentList" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 7200s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetProgramContent" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 14400s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetCatalogueTree" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 7200s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetConfiguration" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetContentList" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 7200s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetMostPopularContent" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 7200s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetMovieCollections" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 7200s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetSimilarContent" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 86400s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=SearchContents" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 7200s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetSubHierarchyCount" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 7200s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetAllSeriesEpisodesCount" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 7200s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        elseif (bereq.url ~ "CheckConnectionWC.test" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 604800s;
                return(deliver);
        }
        elseif (bereq.url ~ "action=GetContentMetadataCustom" && beresp.status <= 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 7200s;
                                set beresp.do_gzip = true;
                return(deliver);
        }
        else{
                set beresp.ttl = 0s;
                return(deliver);
        }
        if(beresp.status > 300) {
                unset beresp.http.Set-Cookie;
                unset beresp.http.Cache-Control;
                set beresp.ttl = 0s;
                return(deliver);
        }
}

sub vcl_deliver {
########    BEGIN ADD for security rules PAO 20131120

   unset resp.http.X-Powered-By;
   unset resp.http.X-Varnish;
   unset resp.http.Via;
   set resp.http.Server = "www.domain.com";
#set resp.http.Access-Control-Allow-Origin = "http://www.domain.com";
#set resp.http.Access-Control-Allow-Credentials = "true";
   set resp.http.X-Debug = req.http.X-VarnType;

########    END   ADD for security rules PAO 20131120
                        #set resp.http.Cache-Control = "must-revalidate";
                        #if (obj.hits > 0) {
                        #        set resp.http.X-Cache = "HIT";
                        #} else {
                        #        set resp.http.X-Cache = "MISS";
                        #}
                        return(deliver);
}
